#!/usr/bin/env python3
"""
Lanzador de Mission Center con permisos elevados usando PolicyKit.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# Ruta base del proyecto
PROJECT_ROOT = Path(__file__).parent.parent
MAIN_SCRIPT = PROJECT_ROOT / "main.py"
PYTHON_EXECUTABLE = sys.executable


def check_permissions():
    """Verifica si tenemos los permisos necesarios."""
    # Verificar acceso a archivos del sistema que requieren permisos
    test_files = [
        "/proc/meminfo",
        "/proc/cpuinfo", 
        "/proc/stat",
        "/proc/loadavg",
        "/sys/class/dmi/id/product_name",
        "/sys/class/hwmon",
        "/sys/devices/system/cpu",
    ]
    
    accessible_files = 0
    for file_path in test_files:
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    f.read(1)  # Intentar leer al menos 1 byte
                accessible_files += 1
        except (PermissionError, OSError):
            continue
    
    return accessible_files >= len(test_files) * 0.8  # Al menos 80% accesible


def check_container_environment():
    """Detecta si estamos ejecutando en un contenedor o entorno restringido."""
    container_indicators = [
        # Verificar archivos de contenedor
        os.path.exists("/.dockerenv"),
        os.path.exists("/run/.containerenv"),
        # Verificar variables de entorno
        "container" in os.environ,
        "DOCKER_CONTAINER" in os.environ,
        "KUBERNETES_SERVICE_HOST" in os.environ,
    ]
    
    # Verificar si no se pueden elevar privilegios
    no_new_privs = False
    try:
        # Intentar verificar la bandera no_new_privs
        result = subprocess.run(
            ["grep", "-q", "NoNewPrivs.*1", "/proc/self/status"],
            capture_output=True,
            timeout=5
        )
        no_new_privs = result.returncode == 0
    except:
        pass
    
    return {
        "is_container": any(container_indicators),
        "no_new_privs": no_new_privs,
        "has_restrictions": any(container_indicators) or no_new_privs
    }


def check_pkexec():
    """Verifica si pkexec est√° disponible."""
    return shutil.which("pkexec") is not None


def check_sudo():
    """Verifica si sudo est√° disponible."""
    return shutil.which("sudo") is not None


def create_policy_file():
    """Crea un archivo de pol√≠tica para PolicyKit."""
    policy_content = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>
  <action id="org.missioncenter.run">
    <description>Run Mission Center with system access</description>
    <message>Mission Center necesita acceso al sistema para monitorear recursos</message>
    <defaults>
      <allow_any>auth_admin</allow_any>
      <allow_inactive>auth_admin</allow_inactive>
      <allow_active>auth_admin_keep</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">{python}</annotate>
    <annotate key="org.freedesktop.policykit.exec.allow_gui">true</annotate>
  </action>
</policyconfig>""".format(python=PYTHON_EXECUTABLE)
    
    policy_file = PROJECT_ROOT / "mission-center.policy"
    policy_file.write_text(policy_content)
    return policy_file


def install_policy():
    """Instala la pol√≠tica de PolicyKit."""
    policy_file = create_policy_file()
    system_policy_dir = Path("/usr/share/polkit-1/actions")
    
    if system_policy_dir.exists():
        try:
            # Copiar la pol√≠tica al directorio del sistema
            subprocess.run([
                "sudo", "cp", str(policy_file), 
                str(system_policy_dir / "mission-center.policy")
            ], check=True)
            print("‚úÖ Pol√≠tica de PolicyKit instalada correctamente")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando pol√≠tica: {e}")
            return False
    else:
        print("‚ö†Ô∏è  Directorio de pol√≠ticas no encontrado")
        return False


def launch_with_pkexec():
    """Lanza la aplicaci√≥n usando pkexec."""
    try:
        cmd = [
            "pkexec", 
            "--action-id", "org.missioncenter.run",
            PYTHON_EXECUTABLE,
            str(MAIN_SCRIPT)
        ]
        
        print("üîê Solicitando permisos de administrador...")
        print("üí° Se abrir√° una ventana de autenticaci√≥n")
        
        subprocess.run(cmd, cwd=str(PROJECT_ROOT))
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando con pkexec: {e}")
        return False
    except KeyboardInterrupt:
        print("\nüõë Operaci√≥n cancelada por el usuario")
        return False
    
    return True


def launch_with_sudo():
    """Lanza la aplicaci√≥n usando sudo."""
    try:
        cmd = [
            "sudo", 
            PYTHON_EXECUTABLE,
            str(MAIN_SCRIPT)
        ]
        
        print("üîê Solicitando permisos de administrador con sudo...")
        
        subprocess.run(cmd, cwd=str(PROJECT_ROOT))
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando con sudo: {e}")
        return False
    except KeyboardInterrupt:
        print("\nüõë Operaci√≥n cancelada por el usuario")
        return False
    
    return True


def launch_normal():
    """Lanza la aplicaci√≥n normalmente (sin permisos elevados)."""
    try:
        cmd = [PYTHON_EXECUTABLE, str(MAIN_SCRIPT)]
        subprocess.run(cmd, cwd=str(PROJECT_ROOT))
    except KeyboardInterrupt:
        print("\nüõë Aplicaci√≥n detenida por el usuario")


def main():
    """Funci√≥n principal."""
    print("üöÄ Mission Center - Lanzador con Permisos")
    print("=" * 45)
    
    # Verificar entorno de ejecuci√≥n
    container_info = check_container_environment()
    
    if container_info["has_restrictions"]:
        print("üê≥ Entorno contenedorizado o restringido detectado")
        if container_info["is_container"]:
            print("üì¶ Ejecut√°ndose dentro de un contenedor")
        if container_info["no_new_privs"]:
            print("üîí Bandera 'no new privileges' activa")
        print("")
        print("üí° En entornos contenedorizados:")
        print("   ‚Ä¢ Los datos b√°sicos del sistema est√°n disponibles")
        print("   ‚Ä¢ Algunos sensores pueden no ser accesibles")
        print("   ‚Ä¢ La elevaci√≥n de privilegios est√° restringida")
        print("")
        print("üéØ Iniciando Mission Center en modo contenedor...")
        launch_normal()
        return
    
    # Verificar si ya tenemos los permisos necesarios
    if check_permissions():
        print("‚úÖ Permisos suficientes detectados")
        print("üéØ Iniciando Mission Center...")
        launch_normal()
        return
    
    print("‚ö†Ô∏è  Se requieren permisos elevados para acceso completo al sistema")
    print("üìä Esto permite monitorear:")
    print("   ‚Ä¢ Informaci√≥n detallada de CPU y temperatura")
    print("   ‚Ä¢ Estad√≠sticas de memoria y swap") 
    print("   ‚Ä¢ Datos de sensores de hardware")
    print("   ‚Ä¢ Informaci√≥n completa de procesos")
    print("   ‚Ä¢ Estad√≠sticas de E/S de disco")
    print("")
    
    # Verificar m√©todos de elevaci√≥n disponibles
    has_pkexec = check_pkexec()
    has_sudo = check_sudo()
    
    if has_pkexec:
        print("üîê Usando PolicyKit (pkexec) para solicitar permisos...")
        
        # Preguntar si instalar la pol√≠tica
        print("üí° ¬øDeseas instalar la pol√≠tica de PolicyKit para futuros usos? (y/N): ", end="")
        try:
            response = input().strip().lower()
            if response in ['y', 'yes', 's', 'si', 's√≠']:
                if install_policy():
                    print("‚úÖ Pol√≠tica instalada correctamente")
                else:
                    print("‚ö†Ô∏è  No se pudo instalar la pol√≠tica, continuando sin ella")
        except KeyboardInterrupt:
            print("\nüõë Operaci√≥n cancelada")
            return
        
        if launch_with_pkexec():
            return
            
    if has_sudo:
        print("üîê Usando sudo como alternativa...")
        if launch_with_sudo():
            return
    
    if not has_pkexec and not has_sudo:
        print("‚ùå No se encontraron m√©todos de elevaci√≥n de permisos")
        print("üí° Instala 'policykit-1' o 'sudo' para usar permisos elevados")
    
    print("‚ö†Ô∏è  Ejecutando con permisos limitados...")
    print("üìä Algunas m√©tricas pueden no estar disponibles")
    launch_normal()


if __name__ == "__main__":
    main()